#!/usr/bin/env node

const path = require('path');

// https://www.npmjs.com/package/cli
const cli = require('cli');

// Read version info of ltpa-scraper.
const packageJson = require(path.join(__dirname, '..', 'package.json'));
const DymoServices = require(path.join(__dirname, '..', 'src', 'dymo-services.js'));
const imageServices = require(path.join(__dirname, '..', 'src', 'image-services.js'));

// Display app name and version on --version.
cli.setApp(packageJson.name, packageJson.version);

const options = cli.parse({
    'list-printers': [false, 'List all system printers found.'],
    version: [false, 'Returns application name and version']
});

const program = path.basename(process.argv[1]);
const arg1 = process.argv.length > 2 ? process.argv[2] : '';

// Show version info and exit.
if (options.version) {
    cli.info(`${packageJson.name} v${packageJson.version}`);
    process.exit(0);
}

if (options['list-printers']) {
    new DymoServices().listPrinters()
        .then(printers => {
            console.log(JSON.stringify(printers, null, 2));
        })
        .catch(error => {
            cli.error(JSON.stringify(error, null, 2));
            process.exit(1);
        });
    return;
}

// Print given text as label.
if (arg1) {
    const dymoServices = new DymoServices();
    const {imageWidth, imageHeight} = dymoServices.DYMO_LABELS[1];
    imageServices.createImageWithText(imageWidth, imageHeight, 50, 128, arg1)
        .then(image => {
            // Rotate image for label writer.
            image.rotate(-90, true);
            imageServices.convertImageToBitmap(image)
                .then(bitmap => {
                    dymoServices.print(bitmap)
                        .catch(error => {
                            cli.error(JSON.stringify(error, null, 2));
                            process.exit(1);
                        });
                })
                .catch(error => {
                    cli.error(JSON.stringify(error, null, 2));
                    process.exit(1);
                });
        })
        .catch(error => {
            cli.error(JSON.stringify(error, null, 2));
            process.exit(1);
        });
    return;
}

// Use cli.error() to get nice red coloring.
cli.error(`Provide at least one argument to ${program}`);
cli.error(`See ${program} --help for details`);
process.exit(1);

